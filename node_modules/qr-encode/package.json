{
  "name": "qr-encode",
  "version": "0.1.0",
  "description": "Encode a string into a QR code.",
  "keywords": [
    "qr",
    "qr code",
    "QR",
    "barcode",
    "barcodes",
    "bar",
    "code",
    "encode",
    "2d"
  ],
  "devDependencies": {
    "mocha": "1.*",
    "terst": "0.0.1"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/qr-encode",
    "type": "git"
  },
  "main": "./lib/qr-encode.js",
  "dependencies": {},
  "readme": "qr-encode\n==========\n\nJavaScript component to encode strings into QR codes.\n\n\nIt's a repackage of http://d-project.googlecode.com/svn/trunk/misc/qrcode/js/qrcode.js with minor modifcations by https://github.com/pointbiz/bitaddress.org/blob/master/src/qrcode.js and myself for package support.\n\n\nInstall\n-------\n\n### Node.js/Browserify\n\n    npm install --save qr-encode\n\n### Component\n\n    component install cryptocoinjs/qr-encode\n\n\n### Bower\n\n    bower install qr-encode\n\n\n### Script\n\n```html\n<script src=\"/path/to/qr-encode.js\"></script>\n```\n\n\n\nQR Codes\n--------\n\nYou should glance at this: http://en.wikipedia.org/wiki/QR_code\n\n**Error Correction:**\n\n- Level L (Low) 7% of codewords can be restored.\n- Level M (Medium)  15% of codewords can be restored.\n- Level Q (Quartile)  25% of codewords can be restored.\n- Level H (High)  30% of codewords can be restored.\n\n\n\nUsage\n-----\n\nAssuming that you have the following HTML and JS:\n\n```js\n//from: https://github.com/pointbiz/bitaddress.org/blob/master/src/ninja.misc.js\n\nfunction getTypeNumber(text) {\n  var lengthCalculation = text.length * 8 + 12; // length as calculated by the QRCode\n  if (lengthCalculation < 72) { return 1; }\n  else if (lengthCalculation < 128) { return 2; }\n  else if (lengthCalculation < 208) { return 3; }\n  else if (lengthCalculation < 288) { return 4; }\n  else if (lengthCalculation < 368) { return 5; }\n  else if (lengthCalculation < 480) { return 6; }\n  else if (lengthCalculation < 528) { return 7; }\n  else if (lengthCalculation < 688) { return 8; }\n  else if (lengthCalculation < 800) { return 9; }\n  else if (lengthCalculation < 976) { return 10; }\n  return null;\n}\n```\n\n```html\n<div id=\"qr-element\">\n<!-- QR Code will go here -->\n</div>\n```\n\n### IMG Tag\n\n(http://d-project.googlecode.com/svn/trunk/misc/qrcode/js/sample.html)\n\n```js\nfunction createQRCode(text, typeNumber, errorCorrectLevel) {\n  typeNumber = typeNumber || getTypeNumber(text)\n  var qr = QRCode(typeNumber || 4, errorCorrectLevel || QRCode.ErrorCorrectLevel.H)\n  qr.addData(text)\n  qr.make()\n\n  return qr.createImgTag()\n}\n```\nthen ...\n\n```js\nvar qrEl = document.getElementById('qr-element')\nqrEl.innerHTML = createQRCode('testing qr code!')\n```\n\n\n### Canvas\n\n```js\n//from: https://github.com/pointbiz/bitaddress.org/blob/master/src/ninja.misc.js\n\nfunction createCanvas(text, sizeMultiplier) {\n  sizeMultiplier = (sizeMultiplier == undefined) ? 2 : sizeMultiplier; // default 2\n  // create the qrcode itself\n  var typeNumber = getTypeNumber(text);\n  var qrcode = new QRCode(typeNumber, QRCode.ErrorCorrectLevel.H);\n  qrcode.addData(text);\n  qrcode.make();\n  var width = qrcode.getModuleCount() * sizeMultiplier;\n  var height = qrcode.getModuleCount() * sizeMultiplier;\n  // create canvas element\n  var canvas = document.createElement('canvas');\n  var scale = 10.0;\n  canvas.width = width * scale;\n  canvas.height = height * scale;\n  canvas.style.width = width + 'px';\n  canvas.style.height = height + 'px';\n  var ctx = canvas.getContext('2d');\n  ctx.scale(scale, scale);\n  // compute tileW/tileH based on width/height\n  var tileW = width / qrcode.getModuleCount();\n  var tileH = height / qrcode.getModuleCount();\n  // draw in the canvas\n  for (var row = 0; row < qrcode.getModuleCount(); row++) {\n    for (var col = 0; col < qrcode.getModuleCount(); col++) {\n      ctx.fillStyle = qrcode.isDark(row, col) ? \"#000000\" : \"#ffffff\";\n      ctx.fillRect(col * tileW, row * tileH, tileW, tileH);\n    }\n  }\n  // return just built canvas\n  return canvas;\n}\n```\n\nthen..\n\n```js\nvar qrEl = document.getElementById('qr-element')\nqrEl.innerHTML = ''\nqrEl.appendChild(createCanvas('testing qr code!'))\n```\n\n\n\n### HTML Table Tag (legacy browsers)\n\n```css\n/*from: https://github.com/pointbiz/bitaddress.org/blob/master/src/main.css*/\n\n.qrcodetable { border-width: 0px; border-style: none; border-color: #0000ff; border-collapse: collapse; }\n.qrcodetddark { border-width: 0px; border-style: none; border-color: #0000ff; border-collapse: collapse; padding: 0; margin: 0; width: 2px; height: 2px; background-color: #000000; }\n.qrcodetdlight { border-width: 0px; border-style: none; border-color: #0000ff; border-collapse: collapse; padding: 0; margin: 0; width: 2px; height: 2px; background-color: #ffffff; }     \n```\n\n```js\n//from: https://github.com/pointbiz/bitaddress.org/blob/master/src/ninja.misc.js\n\nfunction createTableHtml(text) {\n  var typeNumber = getTypeNumber(text)\n  var qr = new QRCode(typeNumber, QRCode.ErrorCorrectLevel.H);\n  qr.addData(text);\n  qr.make();\n  var tableHtml = \"<table class='qrcodetable'>\";\n  for (var r = 0; r < qr.getModuleCount(); r++) {\n    tableHtml += \"<tr>\";\n    for (var c = 0; c < qr.getModuleCount(); c++) {\n      if (qr.isDark(r, c)) {\n        tableHtml += \"<td class='qrcodetddark'/>\";\n      } else {\n        tableHtml += \"<td class='qrcodetdlight'/>\";\n      }\n    }\n    tableHtml += \"</tr>\";\n  }\n  tableHtml += \"</table>\";\n  return tableHtml;\n}\n```\n\nthen...\n\n```js\nvar qrEl = document.getElementById('qr-element')\nqrEl.innerHTML = createTableHtml('testing qr code!')\n```\n\n\nCredits\n-------\n\n* Example code is primarily from: https://github.com/pointbiz/bitaddress.org\n* QRCode code is primarily from: http://www.d-project.com/ with most modifications from @pointbiz\n\n\n\nLicense\n-------\n\nMost of the code: \n \nCopyright (c) 2009 Kazuhiko Arase\n\nURL: http://www.d-project.com/\n\nLicensed under the MIT license:\nhttp://www.opensource.org/licenses/mit-license.php\n\nThe word 'QR Code' is registered trademark of\nDENSO WAVE INCORPORATED\nhttp://www.denso-wave.com/qrcode/faqpatent-e.html\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/qr-encode/issues"
  },
  "homepage": "https://github.com/cryptocoinjs/qr-encode",
  "_id": "qr-encode@0.1.0",
  "dist": {
    "shasum": "385b99e712f778395becf6f1e171a89b03fc179c"
  },
  "_from": "qr-encode@",
  "_resolved": "https://registry.npmjs.org/qr-encode/-/qr-encode-0.1.0.tgz"
}
